#!/usr/bin/expect 


proc getLine {fd line} {

    upvar $line ln

    while {[set lineLen [gets $fd ln]] >= 0} {

        if { $lineLen == 0 } continue

        set ln [string trim $ln]
        if { [string length $ln] == 0 } continue

        if { [string index $ln 0] == "#" } continue

        return 1

    }
    
    return 0
    
}


#if {$argc < 2}{/
#    puts stdout "$argv0 err pararms\n"
#    exit 1
#}

set timeout 3

if {$argc < 1} {
    puts "-------------------------------------------------------------"
    puts ""
    puts "===> WARNNING: Pararms is illegal !!!"
    puts "===> ++++++++ The correct number of parameters is only one !!!"
    puts ""
    puts "-------------------------------------------------------------"
    exit
}


set SOURCEFILE [lindex $argv 0]

set INPUTFILE "/dev/null"

set OUTPUTFILE "/dev/null"

if {$argc >= 2} {
    set INPUTFILE [lindex $argv 1]
}

if {$argc >= 3} {
    set OUTPUTFILE [lindex $argv 2]
}


puts $INPUTFILE

puts $OUTPUTFILE

set DEBUGFILE "DEBUG_TOOL_WITH_LOG_exefile"

set LOGFILE "DEBUG_TOOL_WITH_LOG_logfile"

set TMPFILE "DEBUG_TOOL_WITH_LOG_tmpfile"

exec  gcc -g $SOURCEFILE -o $DEBUGFILE

exec ./DWARFInfoFileter $DEBUGFILE > $TMPFILE

spawn  gdb -q $DEBUGFILE

set cmdFd [open $TMPFILE]

while { [getLine $cmdFd line] == 1} {

    expect "(gdb)" { send "${line}\r"  }

}

close $cmdFd

expect "(gdb)" { send "rbreak ${SOURCEFILE}:.\r" }

expect "(gdb)" { send "info break\r" }

log_file $LOGFILE

expect "(gdb)" { send "run < $INPUTFILE > $OUTPUTFILE\r" }

expect "(gdb)" { send "info source\r"  }

while {1} {

    expect {
       
        "__libc_start_main"
        {
            log_file
            send "quit\r"
            send "y\r"
            break
        }
        "(gdb)"
        {
            send "info local\r"
            send "next\r"
        } 
    }
    
}


exec rm $DEBUGFILE
exec rm $TMPFILE

exit 1 
